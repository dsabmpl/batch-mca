class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> bigList = new ArrayList<>();
        List<Integer> smallList = new ArrayList<>();
        combinationSumHelper(candidates , 0 , target , smallList , bigList );
        return bigList;
    }   

    public void combinationSumHelper(int candidates[] , int index , int target ,  List<Integer> smallList , List<List<Integer>> bigList){
        if(target == 0){
            bigList.add(new ArrayList<>(smallList));
            return;
        }

        if(target < 0){
            return;
        }

        for(int i = index;i<candidates.length;i++){
            smallList.add(candidates[i]);
            combinationSumHelper(candidates , i , target - candidates[i] , smallList , bigList);
            smallList.remove(smallList.size() - 1);
        }
    }
}