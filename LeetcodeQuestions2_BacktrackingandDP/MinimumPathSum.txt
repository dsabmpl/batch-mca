//RECURSIVE

// class Solution {
//     public int minPathSum(int[][] grid) {
//         int m = grid.length;
//         int n = grid[0].length;
//         return helper(grid , 0 , 0 , m - 1 , n - 1);
//     }

//     int helper(int[][] grid , int row , int col , int m , int n){
//         if(row == m && col == n ){
//             return grid[m][n];
//         }

//         if(row > m || col > n){
//             return Integer.MAX_VALUE;
//         }

//         int down = helper(grid , row + 1 , col , m , n);
//         int right = helper(grid , row , col + 1 , m , n );

//         return grid[row][col] + Math.min(down , right);
//     }
// }

class Solution {
    public int minPathSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        Integer dp[][] = new Integer[m][n];
        // return helper(grid , 0 , 0 , m - 1 , n - 1 , dp);
        dp[0][0] = grid[0][0];
        for(int i = 1;i<n;i++){
            dp[0][i] = grid[0][i] + dp[0][i - 1];
        }

        for(int i = 1;i<m;i++){
            dp[i][0] = grid[i][0] + dp[i - 1][0];
        }

        for(int i = 1;i<m;i++){
            for(int j = 1;j<n;j++){
                dp[i][j] = grid[i][j] + Math.min(dp[i - 1][j] , dp[i][j - 1]);
            }
        }

        return dp[m- 1][n - 1];
    }

    // MEMOIZATION

    int helper(int[][] grid , int row , int col , int m , int n , Integer dp[][]){
        if(row == m && col == n ){
            return grid[m][n];
        }

        if(row > m || col > n){
            return Integer.MAX_VALUE;
        }

        if(dp[row][col] != null)return dp[row][col];


        int down = helper(grid , row + 1 , col , m , n , dp);
        int right = helper(grid , row , col + 1 , m , n, dp );

        dp[row][col] =  grid[row][col] + Math.min(down , right);
        return dp[row][col];
    }
}