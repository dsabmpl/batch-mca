class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[][] dp = new int[m][n];
        // return helper(obstacleGrid , dp , 0 , 0 , m - 1 , n - 1);
        dp[0][0] = obstacleGrid[0][0] == 0 ? 1 : 0;
        for(int i = 1;i<n;i++){
            if(obstacleGrid[0][i] == 0){
                dp[0][i] = dp[0][i - 1];
            }
        }

         for(int i = 1;i<m;i++){
            if(obstacleGrid[i][0] == 0){
                dp[i][0] = dp[i - 1][0];
            }
        }

        for(int i = 1;i<m;i++){
            for(int j = 1;j<n;j++){
                if(obstacleGrid[i][j] == 0){
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                }
            }
        }

        return dp[m - 1][n - 1];
    }

    public int helper(int[][] obstacleGrid , Integer[][] dp , int row , int col , int m , int n){
        if(row == m && col == n){
            return obstacleGrid[m][n] == 0 ? 1 : 0;
        }
        if(row > m || col > n || obstacleGrid[row][col] == 1){
            return 0;
        }

        if(dp[row][col] != null)return dp[row][col];

        dp[row][col] = helper(obstacleGrid , dp , row + 1 , col , m , n) + helper(obstacleGrid , dp , row , col + 1 , m , n);
        return  dp[row][col];
    }
}